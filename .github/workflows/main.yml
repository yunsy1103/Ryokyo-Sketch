name: Build and Deploy to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
 build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Clean and Build without Tests
        run: |
          ./gradlew clean
          ./gradlew build -x test
        env:
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_URL: ${{ secrets.MYSQL_URL }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          GPT_API_KEY: ${{ secrets.GPT_API_KEY }}
          GPT_API_URL: ${{ secrets.GPT_API_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLOUD_AWS_ACCESSKEY: ${{ secrets.CLOUD_AWS_ACCESSKEY }}
          CLOUD_AWS_SECRETKEY: ${{ secrets.CLOUD_AWS_SECRETKEY }}
          CLOUD_AWS_BUCKET: ${{ secrets.CLOUD_AWS_BUCKET }}
          CLOUD_AWS_REGION: ${{ secrets.CLOUD_AWS_REGION }}

        # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/japan-travelling .

        # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/japan-travelling

  # 2. 빌드된 Docker 이미지를 EC2에서 pull 받고 실행하는 과정
 run-docker-image-on-ec2:
    needs: build-docker-image  # build-docker-image job 완료 후 실행
    runs-on: self-hosted  # self-hosted runner 사용 (EC2 인스턴스 설정 필요)

    steps:
      - name: Pull latest Docker Image
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/japan-travelling

      - name: Stop and Remove Existing Container
        run: |
          sudo docker stop japan-travelling || true
          sudo docker rm japan-travelling || true

      - name: Debug Environment Variables
        run: |
          echo "MYSQL_URL=${{ secrets.MYSQL_URL }}"
          echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}"
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
          echo "CLOUD_AWS_ACCESSKEY=${{ secrets.CLOUD_AWS_ACCESSKEY }}"
          
      - name: Run new container
        run: |
          sudo docker run --name japan-travelling -d -p 8080:8080 \
          --restart unless-stopped \
          -e MYSQL_URL=${{ secrets.MYSQL_URL }} \
          -e MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }} \
          -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
          -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
          -e GPT_API_KEY=${{ secrets.GPT_API_KEY }} \
          -e GPT_API_URL=${{ secrets.GPT_API_URL }} \
          -e CLOUD_AWS_ACCESSKEY=${{ secrets.CLOUD_AWS_ACCESSKEY }} \
          -e CLOUD_AWS_SECRETKEY=${{ secrets.CLOUD_AWS_SECRETKEY }} \
          -e CLOUD_AWS_BUCKET=${{ secrets.CLOUD_AWS_BUCKET }} \
          -e CLOUD_AWS_REGION=${{ secrets.CLOUD_AWS_REGION }} \
          ${{ secrets.DOCKERHUB_USERNAME }}/japan-travelling


      - name: Cleanup old Docker images
        run: sudo docker system prune -f
